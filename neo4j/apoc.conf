apoc.import.file.use_neo4j_config=true
apoc.import.file.enabled=true
# Constraints
apoc.initializer.neo4j.0=CREATE CONSTRAINT n10s_unique_uri IF NOT EXISTS FOR (r:Resource) REQUIRE r.uri IS UNIQUE
apoc.initializer.neo4j.1=CREATE CONSTRAINT email IF NOT EXISTS FOR (u:User) REQUIRE u.email IS UNIQUE
# RDF Graph Config
apoc.initializer.neo4j.2=MATCH (g:`_GraphConfig`) WITH count(*) AS count CALL apoc.do.when(count = 0, "CALL n10s.graphconfig.init({handleVocabUris: 'IGNORE'}) YIELD value RETURN value", "", {count:count}) YIELD value RETURN value.bool
apoc.initializer.neo4j.3=CALL n10s.onto.import.fetch('https://syystorage.blob.core.windows.net/rdf-files/Brick.ttl', 'Turtle')
apoc.initializer.neo4j.4=CALL n10s.onto.import.fetch('https://qudt.org/2.1/vocab/unit', 'Turtle')
apoc.initializer.neo4j.5=CALL n10s.rdf.import.fetch('https://syystorage.blob.core.windows.net/rdf-files/master_cobie.ttl', 'Turtle')

# Schema
apoc.initializer.neo4j.6=MERGE (:User {email: 'example@example.com', fullName: 'Example User'})
apoc.initializer.neo4j.7=MATCH (u:User {email: 'example@example.com'}) MERGE (p:Portfolio:Resource {name: 'Example Portfolio', uri: 'https://syyclops.com/example'}) MERGE (u)-[:HAS_ACCESS_TO]->(p)
apoc.initializer.neo4j.8=MATCH (p:Portfolio {uri: 'https://syyclops.com/example'}) MATCH (u:User {email: 'example@example.com'}) MERGE (f:Facility:Resource {name: "Example Facility", uri: "https://syyclops.com/example/example"}) MERGE (p)-[:HAS_FACILITY]->(f) MERGE (u)-[:HAS_ACCESS_TO]->(f)
apoc.initializer.neo4j.9=MATCH (u:User {email: 'example@example.com'}) MERGE (r:Role {name: "SYYSUPERUSER", type: "internal"})  MERGE (u)-[:HAS_ROLE]->(r)  
